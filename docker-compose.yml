version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0-alpine
    container_name: foodfast_mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin123}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-foodfast_drone_delivery}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Server
  server_app:
    build:
      context: ./server_app
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-ghcr.io}/${DOCKER_USERNAME:-ductoanoxo}/foodfast-server:${IMAGE_TAG:-latest}
    container_name: foodfast_server
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - MONGO_URI=mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-admin123}@mongodb:27017/${MONGO_DATABASE:-foodfast_drone_delivery}?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - JWT_EXPIRE=${JWT_EXPIRE:-7d}
    volumes:
      - ./server_app/logs:/app/logs
      - ./server_app/uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Client App
  client_app:
    build:
      context: ./client_app
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-ghcr.io}/${DOCKER_USERNAME:-ductoanoxo}/foodfast-client:${IMAGE_TAG:-latest}
    container_name: foodfast_client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-3000}:80"
    depends_on:
      server_app:
        condition: service_healthy
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Restaurant App
  restaurant_app:
    build:
      context: ./restaurant_app
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-ghcr.io}/${DOCKER_USERNAME:-ductoanoxo}/foodfast-restaurant:${IMAGE_TAG:-latest}
    container_name: foodfast_restaurant
    restart: unless-stopped
    ports:
      - "${RESTAURANT_PORT:-3001}:80"
    depends_on:
      server_app:
        condition: service_healthy
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Admin App
  admin_app:
    build:
      context: ./admin_app
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-ghcr.io}/${DOCKER_USERNAME:-ductoanoxo}/foodfast-admin:${IMAGE_TAG:-latest}
    container_name: foodfast_admin
    restart: unless-stopped
    ports:
      - "${ADMIN_PORT:-3002}:80"
    depends_on:
      server_app:
        condition: service_healthy
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Drone Management App
  drone_manage:
    build:
      context: ./drone_manage
      dockerfile: Dockerfile
    image: ${DOCKER_REGISTRY:-ghcr.io}/${DOCKER_USERNAME:-ductoanoxo}/foodfast-drone:${IMAGE_TAG:-latest}
    container_name: foodfast_drone
    restart: unless-stopped
    ports:
      - "${DRONE_PORT:-3003}:80"
    depends_on:
      server_app:
        condition: service_healthy
    networks:
      - foodfast_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local

networks:
  foodfast_network:
    driver: bridge

name: Code Quality

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  eslint:
    name: ESLint Analysis
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        app:
          - client_app
          - restaurant_app
          - admin_app
          - drone_manage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.app }}
        run: npm ci

      - name: Run ESLint
        working-directory: ./${{ matrix.app }}
        run: npm run lint || echo "Linting completed with warnings"

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server_app/package-lock.json

      - name: Install dependencies
        working-directory: ./server_app
        run: npm ci

      - name: Run tests with coverage
        working-directory: ./server_app
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://admin:admin123@localhost:27017/foodfast_test?authSource=admin
          JWT_SECRET: test-secret-key
        run: npm test -- --coverage || true

      - name: Generate coverage badge
        if: always()
        run: |
          echo "ðŸ“Š Coverage report generated"
          if [ -f "server_app/coverage/coverage-summary.json" ]; then
            echo "Coverage file found"
          fi

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: server_app/coverage
          retention-days: 30

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Check server dependencies
        working-directory: ./server_app
        run: |
          npm audit --audit-level=moderate || echo "Security vulnerabilities found"

      - name: Check client dependencies
        working-directory: ./client_app
        run: |
          npm audit --audit-level=moderate || echo "Security vulnerabilities found"

  docker-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: "*/Dockerfile"
          recursive: true
          failure-threshold: warning


name: CI - Test and Lint

on:
  push:
    branches:
      - main
      - develop
      - DUCTOAN
      - kiet
  pull_request:
    branches:
      - main
      - develop

# Grant minimal permissions required for uploading SARIF/code-scanning results
permissions:
  contents: read
  security-events: write

jobs:
  # Job 1: Unit Tests (Fast, no DB needed)
  unit-tests:
    name: Unit Tests (Server)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server_app/package-lock.json

      - name: Install dependencies
        working-directory: ./server_app
        run: npm ci

      - name: Run Unit Tests
        working-directory: ./server_app
        env:
          NODE_ENV: test
        run: npm run test:unit

      - name: Upload Unit Test Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./server_app/coverage/coverage-final.json
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false

  # Job 2: Integration Tests (Needs MongoDB)
  integration-tests:
    name: Integration Tests (Server)
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server_app/package-lock.json

      - name: Install dependencies
        working-directory: ./server_app
        run: npm ci

      - name: Wait for MongoDB
        run: |
          timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
          echo "MongoDB is ready!"

      - name: Run Integration Tests
        working-directory: ./server_app
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:admin123@localhost:27017/foodfast_test?authSource=admin
          JWT_SECRET: test-secret-key-for-ci-cd
          CLOUDINARY_CLOUD_NAME: test
          CLOUDINARY_API_KEY: test
          CLOUDINARY_API_SECRET: test
        run: npm run test:integration

      - name: Upload Integration Test Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./server_app/coverage/coverage-final.json
          flags: integrationtests
          name: integration-tests-coverage
          fail_ci_if_error: false

      - name: Check for syntax errors
        working-directory: ./server_app
        run: node -c index.js

  # Job 3: Frontend Apps Build & Lint
  test-client-apps:
    name: Build & Lint Frontend Apps
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        app:
          - client_app
          - restaurant_app
          - admin_app
          - drone_manage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        working-directory: ./${{ matrix.app }}
        run: npm ci

      - name: Run linting (ESLint)
        working-directory: ./${{ matrix.app }}
        run: npm run lint || echo "‚ö†Ô∏è  Linting not configured for ${{ matrix.app }}"

      - name: Build application
        working-directory: ./${{ matrix.app }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-build
          path: ${{ matrix.app }}/dist
          retention-days: 7
          if-no-files-found: warn

  # Job 4: Security Scan
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.repository == github.event.repository.full_name
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 5: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, test-client-apps]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "============================================"
          echo "üìä CI/CD Test Summary"
          echo "============================================"
          echo ""
          echo "‚úÖ Unit Tests: ${{ needs.unit-tests.result }}"
          echo "‚úÖ Integration Tests: ${{ needs.integration-tests.result }}"
          echo "‚úÖ Frontend Builds: ${{ needs.test-client-apps.result }}"
          echo ""
          echo "============================================"
          
          if [ "${{ needs.unit-tests.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ] || \
             [ "${{ needs.test-client-apps.result }}" != "success" ]; then
            echo "‚ùå Some tests failed!"
            exit 1
          else
            echo "üéâ All tests passed!"
          fi
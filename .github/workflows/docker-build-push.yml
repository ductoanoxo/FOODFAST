name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
      - DUCTOAN
      - kiet
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  # Job 1: Run Tests (Unit + Integration)
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin123
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: server_app/package.json

      - name: Install dependencies
        run: |
          cd server_app
          npm ci

      - name: Run Unit Tests
        run: |
          cd server_app
          npm run test:unit
        env:
          NODE_ENV: test

      - name: Run Integration Tests
        run: |
          cd server_app
          npm run test:integration
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:admin123@localhost:27017/foodfast_test?authSource=admin
          JWT_SECRET: test-secret-key-for-ci-cd
          CLOUDINARY_CLOUD_NAME: test
          CLOUDINARY_API_KEY: test
          CLOUDINARY_API_SECRET: test

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./server_app/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 2: Build and Push Docker Images (only if tests pass)
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: client_app
            image: foodfast-client
          - name: restaurant_app
            image: foodfast-restaurant
          - name: admin_app
            image: foodfast-admin
          - name: drone_manage
            image: foodfast-drone
          - name: server_app
            image: foodfast-server

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # Use plain sha tag (no branch prefix) to avoid producing tags that start with a hyphen
            # when branch is empty (e.g., certain PR contexts). This prevents invalid tags like
            # "-5c12ec3" from being produced.
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service.name }}
          file: ./${{ matrix.service.name }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.image }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service.image }}:buildcache,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}
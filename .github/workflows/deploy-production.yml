name: Auto Deploy Foodfast to EC2

on:
  push:
    branches:
      - main
      - kiet
      - DUCTOAN
  workflow_dispatch:

env:
  # registry + owner cố định
  REGISTRY: ghcr.io
  OWNER: ductoanoxo

  # tag mặc định: luôn lấy theo commit hiện tại
  IMAGE_TAG: sha-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create remote script
        run: |
          cat > remote-deploy.sh <<'SCRIPT'
          set -e

          REGISTRY="${REGISTRY}"
          OWNER="${OWNER}"
          TAG="${TAG}"
          GHCR_TOKEN="${GHCR_TOKEN}"
          MONGO_URI="${MONGO_URI}"

          # hàm: pull tag nếu có, nếu không có thì fallback sang latest
          pull_or_latest () {
            local image="$1"   # ví dụ: ghcr.io/ductoanoxo/foodfast-server
            local tag="$2"     # ví dụ: sha-123abc
            echo "---- pulling ${image}:${tag} ----"
            if sudo docker pull "${image}:${tag}"; then
              echo "${tag}"
            else
              echo "⚠️  tag ${tag} không tồn tại, fallback sang :latest"
              sudo docker pull "${image}:latest"
              echo "latest"
            fi
          }

          echo "== Login GHCR =="
          echo "${GHCR_TOKEN}" | sudo docker login ghcr.io -u "${OWNER}" --password-stdin

          echo "== Create network (if not exists) =="
          sudo docker network create foodfast-net >/dev/null 2>&1 || true

          # 1) SERVER
          echo "=== Deploy foodfast-server ==="
          REAL_SERVER_TAG=$(pull_or_latest "${REGISTRY}/${OWNER}/foodfast-server" "${TAG}")
          sudo docker rm -f foodfast-server 2>/dev/null || true
          sudo docker run -d --name foodfast-server --restart unless-stopped \
            --network foodfast-net -p 5000:5000 \
            -e MONGO_URI="${MONGO_URI}" \
            "${REGISTRY}/${OWNER}/foodfast-server:${REAL_SERVER_TAG}"

          # 2) CLIENT
          echo "=== Deploy foodfast-client ==="
          REAL_CLIENT_TAG=$(pull_or_latest "${REGISTRY}/${OWNER}/foodfast-client" "${TAG}")
          sudo docker rm -f foodfast-client 2>/dev/null || true
          sudo docker run -d --name foodfast-client --restart unless-stopped \
            --network foodfast-net -p 3000:80 \
            "${REGISTRY}/${OWNER}/foodfast-client:${REAL_CLIENT_TAG}"

          # 3) ADMIN
          echo "=== Deploy foodfast-admin ==="
          REAL_ADMIN_TAG=$(pull_or_latest "${REGISTRY}/${OWNER}/foodfast-admin" "${TAG}")
          sudo docker rm -f foodfast-admin 2>/dev/null || true
          sudo docker run -d --name foodfast-admin --restart unless-stopped \
            --network foodfast-net -p 3001:80 \
            "${REGISTRY}/${OWNER}/foodfast-admin:${REAL_ADMIN_TAG}"

          # 4) RESTAURANT
          echo "=== Deploy foodfast-restaurant ==="
          REAL_RESTAURANT_TAG=$(pull_or_latest "${REGISTRY}/${OWNER}/foodfast-restaurant" "${TAG}")
          sudo docker rm -f foodfast-restaurant 2>/dev/null || true
          sudo docker run -d --name foodfast-restaurant --restart unless-stopped \
            --network foodfast-net -p 3002:80 \
            "${REGISTRY}/${OWNER}/foodfast-restaurant:${REAL_RESTAURANT_TAG}"

          # 5) DRONE
          echo "=== Deploy foodfast-drone ==="
          REAL_DRONE_TAG=$(pull_or_latest "${REGISTRY}/${OWNER}/foodfast-drone" "${TAG}")
          sudo docker rm -f foodfast-drone 2>/dev/null || true
          sudo docker run -d --name foodfast-drone --restart unless-stopped \
            --network foodfast-net \
            "${REGISTRY}/${OWNER}/foodfast-drone:${REAL_DRONE_TAG}"

          echo "✅ Done deploy all containers."
          SCRIPT

      - name: Run remote script on EC2
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          REGISTRY: ${{ env.REGISTRY }}
          OWNER: ${{ env.OWNER }}
          TAG: ${{ env.IMAGE_TAG }}              # truyền sha-xxxx xuống EC2
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "Connecting to $SERVER_USER@$SERVER_HOST ..."
          scp remote-deploy.sh $SERVER_USER@$SERVER_HOST:/tmp/remote-deploy.sh
          ssh $SERVER_USER@$SERVER_HOST "chmod +x /tmp/remote-deploy.sh && \
            REGISTRY='${REGISTRY}' \
            OWNER='${OWNER}' \
            TAG='${TAG}' \
            GHCR_TOKEN='${GHCR_TOKEN}' \
            MONGO_URI='${MONGO_URI}' \
            /tmp/remote-deploy.sh"

      - name: Healthcheck backend
        run: |
          echo "Waiting for backend..."
          for i in {1..6}; do
            echo "Attempt $i"
            if curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/api/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/ ; then
              echo "✅ Backend is up"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Backend is NOT responding on port 5000"
          exit 1

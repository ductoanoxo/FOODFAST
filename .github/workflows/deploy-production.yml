name: Auto Deploy Foodfast to EC2

on:
  # Chỉ tự chạy sau khi workflow build image xong VÀ build đó là của branch main
  workflow_run:
    workflows:
      - Docker Build and Push     # tên workflow build của bạn
    types:
      - completed
    branches:
      - main                      # chỉ main mới deploy

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  deploy:
    # Chỉ chạy nếu workflow build trước đó thành công
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # ======================
      # 1) Checkout đúng commit vừa build
      # ======================
      - name: Checkout (from workflow_run)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      # ======================
      # 2) Xác định tag image sẽ dùng để deploy
      # Vì giờ chỉ deploy cho main nên luôn là latest
      # ======================
      - name: Decide image tag
        id: imagetag
        run: |
          TAG="latest"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Will deploy image tag: $TAG"

      # ======================
      # 3) SSH Setup
      # ======================
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      # ======================
      # 4) Tạo script deploy để chép lên EC2
      # ======================
      - name: Create remote script
        run: |
          cat > remote-deploy.sh <<'SCRIPT'
          set -e

          REGISTRY="${REGISTRY}"
          OWNER="${OWNER}"
          IMAGE_TAG="${IMAGE_TAG}"
          GHCR_TOKEN="${GHCR_TOKEN}"
          MONGO_URI="${MONGO_URI}"

          echo "==> Login GHCR as \$OWNER"
          echo "${GHCR_TOKEN}" | sudo docker login ghcr.io -u "${OWNER}" --password-stdin

          echo "==> Create network"
          sudo docker network create foodfast-net || true

          echo "=== Deploy foodfast-server:\${IMAGE_TAG} ==="
          sudo docker pull "${REGISTRY}/${OWNER}/foodfast-server:${IMAGE_TAG}"
          sudo docker rm -f foodfast-server 2>/dev/null || true
          sudo docker run -d --name foodfast-server --restart unless-stopped \
            --network foodfast-net --network-alias server_app \
            -p 5000:5000 \
            -e MONGO_URI="${MONGO_URI}" \
            "${REGISTRY}/${OWNER}/foodfast-server:${IMAGE_TAG}"

          echo "=== Deploy foodfast-client:\${IMAGE_TAG} ==="
          sudo docker pull "${REGISTRY}/${OWNER}/foodfast-client:${IMAGE_TAG}"
          sudo docker rm -f foodfast-client 2>/dev/null || true
          sudo docker run -d --name foodfast-client --restart unless-stopped \
            --network foodfast-net \
            -p 3000:80 \
            "${REGISTRY}/${OWNER}/foodfast-client:${IMAGE_TAG}"

          echo "=== Deploy foodfast-admin:\${IMAGE_TAG} ==="
          sudo docker pull "${REGISTRY}/${OWNER}/foodfast-admin:${IMAGE_TAG}"
          sudo docker rm -f foodfast-admin 2>/dev/null || true
          sudo docker run -d --name foodfast-admin --restart unless-stopped \
            --network foodfast-net \
            -p 3001:80 \
            "${REGISTRY}/${OWNER}/foodfast-admin:${IMAGE_TAG}"

          echo "=== Deploy foodfast-restaurant:\${IMAGE_TAG} ==="
          sudo docker pull "${REGISTRY}/${OWNER}/foodfast-restaurant:${IMAGE_TAG}"
          sudo docker rm -f foodfast-restaurant 2>/dev/null || true
          sudo docker run -d --name foodfast-restaurant --restart unless-stopped \
            --network foodfast-net \
            -p 3002:80 \
            "${REGISTRY}/${OWNER}/foodfast-restaurant:${IMAGE_TAG}"

          echo "=== Deploy foodfast-drone:\${IMAGE_TAG} ==="
          sudo docker pull "${REGISTRY}/${OWNER}/foodfast-drone:${IMAGE_TAG}"
          sudo docker rm -f foodfast-drone 2>/dev/null || true
          sudo docker run -d --name foodfast-drone --restart unless-stopped \
            --network foodfast-net \
            "${REGISTRY}/${OWNER}/foodfast-drone:${IMAGE_TAG}"

          echo "✅ Deploy done."
          SCRIPT

      # ======================
      # 5) Chạy script trên EC2
      # ======================
      - name: Run remote script on EC2
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          REGISTRY: ${{ env.REGISTRY }}
          OWNER: ${{ env.OWNER }}
          IMAGE_TAG: ${{ steps.imagetag.outputs.tag }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "Connecting to $SERVER_USER@$SERVER_HOST ..."
          echo "Deploying with image tag: ${IMAGE_TAG}"

          scp remote-deploy.sh $SERVER_USER@$SERVER_HOST:/tmp/remote-deploy.sh

          ssh $SERVER_USER@$SERVER_HOST "chmod +x /tmp/remote-deploy.sh && \
            REGISTRY='${REGISTRY}' \
            OWNER='${OWNER}' \
            IMAGE_TAG='${IMAGE_TAG}' \
            GHCR_TOKEN='${GHCR_TOKEN}' \
            MONGO_URI='${MONGO_URI}' \
            /tmp/remote-deploy.sh"

      # ======================
      # 6) Healthcheck
      # ======================
      - name: Healthcheck backend
        run: |
          echo "Waiting for backend..."
          for i in {1..6}; do
            echo "Attempt $i"
            if curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/api/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/ ; then
              echo "✅ Backend is up"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Backend is NOT responding on port 5000"
          exit 1

name: Auto Deploy Foodfast to EC2

on:
  push:
    branches:
      - main
      - kiet
      - DUCTOAN
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: ductoanoxo
  SERVER_TAG: sha-cfccd2f
  RESTAURANT_TAG: buildcache
  CLIENT_TAG: buildcache
  ADMIN_TAG: buildcache
  DRONE_TAG: buildcache

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.PROD_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}
          OWNER: ${{ env.OWNER }}
          SERVER_TAG: ${{ env.SERVER_TAG }}
          RESTAURANT_TAG: ${{ env.RESTAURANT_TAG }}
          CLIENT_TAG: ${{ env.CLIENT_TAG }}
          ADMIN_TAG: ${{ env.ADMIN_TAG }}
          DRONE_TAG: ${{ env.DRONE_TAG }}
        run: |
          ssh $SERVER_USER@$SERVER_HOST << EOF
            set -e

            REGISTRY="${REGISTRY}"
            OWNER="${OWNER}"

            echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${OWNER}" --password-stdin

            declare -A SERVICES
            SERVICES[foodfast-server]="${REGISTRY}/${OWNER}/foodfast-server:${SERVER_TAG}"
            SERVICES[foodfast-restaurant]="${REGISTRY}/${OWNER}/foodfast-restaurant:${RESTAURANT_TAG}"
            SERVICES[foodfast-client]="${REGISTRY}/${OWNER}/foodfast-client:${CLIENT_TAG}"
            SERVICES[foodfast-admin]="${REGISTRY}/${OWNER}/foodfast-admin:${ADMIN_TAG}"
            SERVICES[foodfast-drone]="${REGISTRY}/${OWNER}/foodfast-drone:${DRONE_TAG}"

            docker network create foodfast-net || true

            for NAME in "\${!SERVICES[@]}"; do
              IMAGE="\${SERVICES[\$NAME]}"
              echo "-----------------------------"
              echo "Deploying \$NAME with image \$IMAGE"
              docker pull "\$IMAGE"

              if [ "\$(docker ps -aq -f name=\$NAME)" ]; then
                docker stop "\$NAME" || true
                docker rm "\$NAME" || true
              fi

              PORT_OPT=""
              case "\$NAME" in
                foodfast-server)
                  PORT_OPT="-p 5000:5000"
                  ;;
                foodfast-client)
                  PORT_OPT="-p 3000:80"
                  ;;
                foodfast-admin)
                  PORT_OPT="-p 3001:80"
                  ;;
                foodfast-restaurant)
                  PORT_OPT="-p 3002:80"
                  ;;
                foodfast-drone)
                  PORT_OPT=""
                  ;;
              esac

              docker run -d \
                --name "\$NAME" \
                --restart unless-stopped \
                --network foodfast-net \
                \$PORT_OPT \
                "\$IMAGE"
            done
EOF

      - name: Healthcheck backend
        run: |
          sleep 10
          curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/health \
            || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/api/health \
            || (echo "healthcheck failed" && exit 1)

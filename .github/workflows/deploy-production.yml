name: Auto Deploy Foodfast to EC2

on:
  push:
    branches:
      - main
      - kiet
      - DUCTOAN
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OWNER: ductoanoxo
  IMAGE_TAG: sha-${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ env.OWNER }} --password-stdin

      - name: Build and push frontend images (client/admin/restaurant)
        run: |
          # Build & push client
          docker build --build-arg VITE_API_URL="${{ secrets.PROD_API_URL }}" -t ${REGISTRY}/${OWNER}/foodfast-client:${{ env.IMAGE_TAG }} ./client_app
          docker push ${REGISTRY}/${OWNER}/foodfast-client:${{ env.IMAGE_TAG }}

          # Build & push admin
          docker build --build-arg VITE_API_URL="${{ secrets.PROD_API_URL }}" -t ${REGISTRY}/${OWNER}/foodfast-admin:${{ env.IMAGE_TAG }} ./admin_app
          docker push ${REGISTRY}/${OWNER}/foodfast-admin:${{ env.IMAGE_TAG }}

          # Build & push restaurant
          docker build --build-arg VITE_API_URL="${{ secrets.PROD_API_URL }}" -t ${REGISTRY}/${OWNER}/foodfast-restaurant:${{ env.IMAGE_TAG }} ./restaurant_app
          docker push ${REGISTRY}/${OWNER}/foodfast-restaurant:${{ env.IMAGE_TAG }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create remote script
        run: |
          cat > remote-deploy.sh <<'SCRIPT'
          set -e

          REGISTRY="${REGISTRY}"
          OWNER="${OWNER}"
          TAG="${TAG}"
          GHCR_TOKEN="${GHCR_TOKEN}"
          MONGO_URI="${MONGO_URI}"
          API_URL="${API_URL}"

          pull_safe () {
            local image="$1"
            local tag="$2"

            if sudo docker pull "${image}:${tag}" >/dev/null 2>&1; then
              echo "${tag}"
              return
            fi

            if sudo docker pull "${image}:latest" >/dev/null 2>&1; then
              echo "latest"
              return
            fi

            echo "none"
          }

          echo "== Login GHCR =="
          echo "${GHCR_TOKEN}" | sudo docker login ghcr.io -u "${OWNER}" --password-stdin

          echo "== Create network (if not exists) =="
          sudo docker network create foodfast-net >/dev/null 2>&1 || true

          # 1) SERVER
          echo "=== Deploy foodfast-server ==="
          SERVER_IMAGE="${REGISTRY}/${OWNER}/foodfast-server"
          REAL_SERVER_TAG=$(pull_safe "${SERVER_IMAGE}" "${TAG}")
          if [ "${REAL_SERVER_TAG}" != "none" ]; then
            sudo docker rm -f server_app >/dev/null 2>&1 || true
            sudo docker rm -f foodfast-server >/dev/null 2>&1 || true

            sudo docker run -d --name server_app --restart unless-stopped \
              --network foodfast-net -p 5000:5000 \
              -e MONGO_URI="${MONGO_URI}" \
              "${SERVER_IMAGE}:${REAL_SERVER_TAG}"
          else
            echo "⚠️  Không tìm thấy image cho foodfast-server"
          fi

          # 2) CLIENT (3000)
          echo "=== Deploy foodfast-client ==="
          CLIENT_IMAGE="${REGISTRY}/${OWNER}/foodfast-client"
          REAL_CLIENT_TAG=$(pull_safe "${CLIENT_IMAGE}" "${TAG}")
          if [ "${REAL_CLIENT_TAG}" != "none" ]; then
            sudo docker rm -f foodfast-client >/dev/null 2>&1 || true
            sudo docker run -d --name foodfast-client --restart unless-stopped \
              --network foodfast-net -p 3000:80 \
              -e VITE_API_URL="${API_URL}" \
              -e REACT_APP_API_URL="${API_URL}" \
              "${CLIENT_IMAGE}:${REAL_CLIENT_TAG}"
          else
            echo "⚠️  Không tìm thấy image cho foodfast-client"
          fi

          # 3) ADMIN (3001)
          echo "=== Deploy foodfast-admin ==="
          ADMIN_IMAGE="${REGISTRY}/${OWNER}/foodfast-admin"
          REAL_ADMIN_TAG=$(pull_safe "${ADMIN_IMAGE}" "${TAG}")
          if [ "${REAL_ADMIN_TAG}" != "none" ]; then
            sudo docker rm -f foodfast-admin >/dev/null 2>&1 || true
            sudo docker run -d --name foodfast-admin --restart unless-stopped \
              --network foodfast-net -p 3001:80 \
              -e VITE_API_URL="${API_URL}" \
              -e REACT_APP_API_URL="${API_URL}" \
              "${ADMIN_IMAGE}:${REAL_ADMIN_TAG}"
          else
            echo "⚠️  Không tìm thấy image cho foodfast-admin"
          fi

          # 4) RESTAURANT (3002)
          echo "=== Deploy foodfast-restaurant ==="
          REST_IMAGE="${REGISTRY}/${OWNER}/foodfast-restaurant"
          REAL_REST_TAG=$(pull_safe "${REST_IMAGE}" "${TAG}")
          if [ "${REAL_REST_TAG}" != "none" ]; then
            sudo docker rm -f foodfast-restaurant >/dev/null 2>&1 || true
            sudo docker run -d --name foodfast-restaurant --restart unless-stopped \
              --network foodfast-net -p 3002:80 \
              -e VITE_API_URL="${API_URL}" \
              -e REACT_APP_API_URL="${API_URL}" \
              "${REST_IMAGE}:${REAL_REST_TAG}"
          else
            echo "⚠️  Không tìm thấy image cho foodfast-restaurant"
          fi

          # 5) DRONE (không cần API_URL)
          echo "=== Deploy foodfast-drone ==="
          DRONE_IMAGE="${REGISTRY}/${OWNER}/foodfast-drone"
          REAL_DRONE_TAG=$(pull_safe "${DRONE_IMAGE}" "${TAG}")
          if [ "${REAL_DRONE_TAG}" != "none" ]; then
            sudo docker rm -f foodfast-drone >/dev/null 2>&1 || true
            sudo docker run -d --name foodfast-drone --restart unless-stopped \
              --network foodfast-net \
              "${DRONE_IMAGE}:${REAL_DRONE_TAG}"
          else
            echo "⚠️  Không tìm thấy image cho foodfast-drone"
          fi

          echo "✅ Done deploy all containers."
          SCRIPT

      - name: Run remote script on EC2
        env:
          SERVER_HOST: ${{ secrets.PROD_SERVER_HOST }}
          SERVER_USER: ${{ secrets.PROD_SERVER_USER }}
          REGISTRY: ${{ env.REGISTRY }}
          OWNER: ${{ env.OWNER }}
          TAG: ${{ env.IMAGE_TAG }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          MONGO_URI: ${{ secrets.MONGO_URI }}
          API_URL: ${{ secrets.PROD_API_URL }}
        run: |
          echo "Connecting to $SERVER_USER@$SERVER_HOST ..."
          scp remote-deploy.sh $SERVER_USER@$SERVER_HOST:/tmp/remote-deploy.sh
          ssh $SERVER_USER@$SERVER_HOST "chmod +x /tmp/remote-deploy.sh && \
            REGISTRY='${REGISTRY}' \
            OWNER='${OWNER}' \
            TAG='${TAG}' \
            GHCR_TOKEN='${GHCR_TOKEN}' \
            MONGO_URI='${MONGO_URI}' \
            API_URL='${API_URL}' \
            /tmp/remote-deploy.sh"

      - name: Healthcheck backend
        run: |
          echo "Waiting for backend..."
          for i in {1..6}; do
            echo "Attempt $i"
            if curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/api/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/health \
              || curl -f http://${{ secrets.PROD_SERVER_HOST }}:5000/ ; then
              echo "✅ Backend is up"
              exit 0
            fi
            sleep 5
          done
          echo "❌ Backend is NOT responding on port 5000"
          exit 1
